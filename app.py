import tkinter as tk
from tkinter import ttk
from tkinter import font
from SimpleIter import SimpleIter
from tkinter import messagebox
import json
from enum import Enum
from tkinter import filedialog
from pathlib import Path


defaultString = "### App was generated by Layout Generator ###\n### Author: Krystian Nowakowski ###\n### Version: 1.0 ###\n\nimport tkinter as tk\nfrom tkinter import ttk\n\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title('App')\n        self.resizable(False, False)\n"


class WidgetEnum(Enum):
    BUTTON = 0
    FRAME = 1
    LABEL = 2
    CHECKBUTTON = 3
    RADIOBUTTON = 4
    ENTRY = 5
    COMBOBOX = 6
    LISTBOX = 7
    SCROLLBAR = 8
    TEXT = 9
    SCALE = 10
    SPINBOX = 11
    PROGRESSBAR = 12
    MENU = 13
    SEPARATOR = 14
    LABELFRAME = 15
    PANEDWINDOW = 16
    NOTEBOOK = 17
    CANVAS = 18
    TREEVIEW = 19


class App(tk.Tk):
    def __init__(self):
        super().__init__()
        # Configure variables
        self.widgetNameDict = {}
        self.widgetClickedID = WidgetEnum(value = WidgetEnum.BUTTON)
        self.widgetClicked = None
        self.checkGenerateMenu = tk.BooleanVar(value = False)
        self.buttonIter = SimpleIter()
        self.frameIter = SimpleIter()
        self.labelIter = SimpleIter()
        self.checkbuttonIter = SimpleIter()
        self.radiobuttonIter = SimpleIter()
        self.entryIter = SimpleIter()
        self.comboboxIter = SimpleIter()
        self.listboxIter = SimpleIter()
        self.scrollbarIter = SimpleIter()
        self.textIter = SimpleIter()
        self.scaleIter = SimpleIter()
        self.spinboxIter = SimpleIter()
        self.progressbarIter = SimpleIter()
        self.separatorIter = SimpleIter()
        self.labelframeIter = SimpleIter()
        self.panedwindowIter = SimpleIter()
        self.notebookIter = SimpleIter()
        self.canvasIter = SimpleIter()
        self.treeviewIter = SimpleIter()
        tk.Button()
        # Configure main window
        self.option_add('*tearOff', False)
        self.state('zoomed')
        self._width = self.winfo_screenwidth()
        self._height = self.winfo_screenheight()
        self.defaultWidth = 500
        self.defaultHeight = 500
        self.useGrid = tk.BooleanVar(value = False)
        self.delete = tk.BooleanVar(value = False)
        # Configure menu configuration window
        self.windowMenuConfig = tk.Toplevel(self)
        self.windowMenuConfig.title('Menu configuration')
        self.windowMenuConfig.geometry('450x400+500+300')
        self.windowMenuConfig.resizable(False, False)
        self.windowMenuConfig.protocol('WM_DELETE_WINDOW', func = lambda: self.hideWindow(self.windowMenuConfig))
        self.windowMenuConfig.withdraw()
        self.windowMenuConfig.columnconfigure(0, weight = 1)
        self.windowMenuConfig.columnconfigure(1, weight = 1)
        self.windowMenuConfig.columnconfigure(2, weight = 1)
        self.windowMenuConfig.rowconfigure(0, weight = 1)
        self.windowMenuConfig.rowconfigure(1, weight = 1)
        self.windowMenuConfig.rowconfigure(2, weight = 1)
        self.windowMenuConfig.rowconfigure(3, weight = 1)

        self.treeViewMenus = ttk.Treeview(master = self.windowMenuConfig)
        self.treeViewMenus.heading('#0', text = 'Menu')
        self.treeViewMenus.configure(selectmode = 'browse')
        self.windowMenuConfig.bind('<Button-1>', func = lambda event : self.clearSelectionTreeView(event, self.treeViewMenus))
        self.buttonAddMenu = tk.Button(master = self.windowMenuConfig, text = 'Add Menu', width = 15, command = self.addMenu)
        self.buttonGenerateMenu = tk.Button(master = self.windowMenuConfig, text = 'Generate',width = 15, command = self.generateMenu)
        self.buttonDeleteMenu = tk.Button(master = self.windowMenuConfig, text = 'Delete', width = 15, command = self.deleteMenu)
        self.entryMenu = tk.Entry(master = self.windowMenuConfig, width = 15)
        self.labelMenu = tk.Label(master = self.windowMenuConfig, text = 'Menu name:')
        # Placing widgets in menu configuration window

        self.treeViewMenus.grid(row = 0, column = 0, padx = (20, 5), pady = 40, columnspan = 3, sticky='')
        self.labelMenu.grid(row = 1, column = 0, padx=(20, 5), pady = (10,5))  
        self.entryMenu.grid(row = 1, column = 1, padx = (5, 5), pady = 5)   
        self.buttonAddMenu.grid(row = 1, column = 2, padx = (5, 5), pady = 5)
        self.buttonGenerateMenu.grid(row = 2, column = 2, padx = (5,5), pady = 5)
        self.buttonDeleteMenu.grid(row = 3, column = 2, padx=(5,5), pady=(5, 15))

        # Configure dimension dialog window
        self.windowDimensions = tk.Toplevel(self)
        self.windowDimensions.title('Frame dimensions')
        self.windowDimensions.geometry('300x200+500+300')
        self.windowDimensions.resizable(False, False)
        self.windowDimensions.protocol('WM_DELETE_WINDOW', func = lambda: self.hideWindow(self.windowDimensions))
        self.windowDimensions.deiconify()
        self.windowDimensions.grab_set()

        self.labelDimension = tk.Label(master = self.windowDimensions, text = 'Please enter dimensions of frame.')
        self.labelWidth = tk.Label(master = self.windowDimensions, text = 'Width: ')
        self.labelHeight = tk.Label(master = self.windowDimensions, text = 'Height: ')
        self.spinboxWidth = tk.Spinbox(master = self.windowDimensions, from_ = 0, to = 1920, increment = 10)
        self.spinboxHeight = tk.Spinbox(master = self.windowDimensions, from_ = 0, to = 1080, increment = 10)
        self.buttonApplyDimensions = tk.Button(master = self.windowDimensions, text = 'Apply', command = self.applyDimensions)

        # Placing widgets in dimension dialog window
        self.windowDimensions.rowconfigure(0, weight = 1)
        self.windowDimensions.rowconfigure(1, weight = 1)
        self.windowDimensions.rowconfigure(2, weight = 1)
        self.windowDimensions.rowconfigure(3, weight = 1)
        self.windowDimensions.columnconfigure(0, weight = 1)
        self.windowDimensions.columnconfigure(1, weight = 1)
        self.labelDimension.grid(row = 0, column = 0, columnspan = 2, sticky = 'n')
        self.labelWidth.grid(row = 1, column = 0, sticky = '')
        self.spinboxWidth.grid(row = 1, column = 1, sticky = '')
        self.labelHeight.grid(row = 2, column = 0, sticky = '')
        self.spinboxHeight.grid(row = 2, column = 1, sticky = '')
        self.buttonApplyDimensions.grid(row = 3, column = 0, columnspan = 2, sticky = '')

        ### Creating objects ###
        # Configuring font
        self.fontHelvetica = font.Font(family = 'Helvetica', size = 12, weight = 'normal')
        # View Frame
        self.layoutViewFrame = tk.Frame(master = self, width = self.defaultWidth, height = self.defaultHeight, background = 'floral white')
        # Notebook
        self.notebook = ttk.Notebook(master = self, width = 250, height = self._height - 100)
        self.widgetsPage = tk.Frame(master = self.notebook)
        
        self.propertiesPage = tk.Frame(master = self.notebook)
        self.notebook.add(self.widgetsPage, text = 'Widgets')
        self.notebook.add(self.propertiesPage, text = 'Properties')
        # Listbox in widgetsPage
        self.widgetsNameList = ['Button', 'Frame', 'Label', 'Checkbutton', 'Radiobutton', 'Entry', 'Combobox', 'Listbox', 'Scrollbar', 'Text', 'Scale',
                            'Spinbox', 'Progressbar', 'Menu', 'Separator', 'Label Frame', 'Paned Window', 'Notebook', 'Canvas', 'Treeview']
        self.widgetsListStringVar = tk.StringVar(value=self.widgetsNameList)
        self.listboxWidgets = tk.Listbox(master = self.widgetsPage, listvariable=self.widgetsListStringVar, height = 20, width = 20, font = self.fontHelvetica)

        # Button in widgetsPage
        self.buttonGenerate = tk.Button(master = self.widgetsPage, text = 'Generate', command = self.generatePythonFile)
        self.checkButtonUseGrid = tk.Checkbutton(master = self.widgetsPage, text = 'Use grid', variable = self.useGrid, onvalue=True, offvalue=False)
        self.checkButtonDelete = tk.Checkbutton(master = self.widgetsPage, text = 'Delete', variable = self.delete, onvalue = True, offvalue = False, command = self.changeCursor)
        self.checkButtonGenerateMenu  = tk.Checkbutton(master = self.widgetsPage, text = 'Generate Menu', variable = self.checkGenerateMenu, onvalue = True, offvalue = False)
        # Widgets in propertiesPage
        self.treeViewProperties = ttk.Treeview(master = self.propertiesPage, height = 35, show = 'headings')
        self.treeViewProperties['columns'] = ('Property', 'Value')
        self.treeViewProperties.column('Property', width = 30, anchor = 'w')
        self.treeViewProperties.column('Value', width = 30, anchor = 'w')
        self.treeViewProperties.heading('Property', text = 'Property')
        self.treeViewProperties.heading('Value', text = 'Value')
        self.checkButtonUseGridProp = tk.Checkbutton(master = self.propertiesPage, text = 'Use grid', variable = self.useGrid, onvalue=True, offvalue=False)
        self.checkButtonDeleteProp = tk.Checkbutton(master = self.propertiesPage, text = 'Delete', variable = self.delete, onvalue = True, offvalue = False, command = self.changeCursor)
        self.labelValue = tk.Label(master = self.propertiesPage, text = 'Value:')
        self.entryValue = tk.Entry(master = self.propertiesPage, width = 15)
        self.buttonApply = tk.Button(master = self.propertiesPage, text = 'Apply', width = 8, command = self.applyProperty)
        self.insertPropertiesToTree()

        # Configuring MenuBar
        self.menuBar = tk.Menu(master = self)
        self.menuFile = tk.Menu(master = self.menuBar)
        self.menuFile.add_command(label = 'Open layout from JSON file', command = self.loadLayoutFromFile)
        self.menuFile.add_command(label = 'Save To JSON file', command = self.saveLayoutToFile)
        self.menuGenerate = tk.Menu(master = self.menuBar)
        self.menuGenerate.add_command(label = 'Generate Python File', command = self.generatePythonFile)
        self.menuConfig = tk.Menu(master = self.menuBar)
        self.menuConfig.add_command(label = 'Config Frame Size', command = self.windowDimensions.deiconify)
        self.menuConfig.add_command(label = 'Config Generating File', command = self.configureGeneratingPath)
        self.menuConfig.add_command(label = 'Config JSON path', command = self.configureJSONPath)
        self.menuBar.add_cascade(menu = self.menuFile, label = 'File')
        self.menuBar.add_cascade(menu = self.menuGenerate, label = 'Generate')
        self.menuBar.add_cascade(menu = self.menuConfig, label = 'Config')
        self['menu'] = self.menuBar
        
        
        # Configure rows and columns
        self.grid_columnconfigure(0, weight = 1)
        self.grid_rowconfigure(0, weight = 1)
        self.widgetsPage.grid_columnconfigure(0, weight = 1)
        self.widgetsPage.grid_rowconfigure(0, weight = 1)
        self.propertiesPage.grid_columnconfigure(0, weight = 1)
        self.propertiesPage.grid_columnconfigure(1, weight = 1)
        self.propertiesPage.grid_columnconfigure(2, weight = 1)
        self.propertiesPage.grid_rowconfigure(0, weight = 1)
        self.propertiesPage.grid_rowconfigure(1, weight = 1)
        self.propertiesPage.grid_rowconfigure(2, weight = 1)
        self.widgetsPage.grid_rowconfigure(0, weight = 1)
        self.widgetsPage.grid_rowconfigure(1, weight = 1)
        self.widgetsPage.grid_rowconfigure(2, weight = 1)
        self.widgetsPage.grid_rowconfigure(3, weight = 1)
        self.widgetsPage.grid_rowconfigure(4, weight = 1)

        # Setting widgets grid
        self.layoutViewFrame.grid(row = 0, column = 0, padx = 10, pady = 10)
        self.notebook.grid(row = 0, column = 1, padx = 10, pady = 10)
        self.listboxWidgets.grid(row = 0, column = 0, padx = 10, pady = 10, sticky = 'nsew', columnspan = 2)
        self.buttonGenerate.grid(row = 4, column = 0, padx = 10, pady = 10, columnspan = 2)
        self.checkButtonUseGrid.grid(row = 2, column = 0, padx = 10, pady = 10, sticky = 'nw')
        self.checkButtonDelete.grid(row = 1, column = 0, columnspan = 1, padx = 10, pady = 10, sticky = 'nw')
        self.treeViewProperties.grid(row = 0, column = 0, padx = 10, pady = 10, sticky = 'nwe', columnspan = 3)
        self.labelValue.grid(row = 1, column = 0, padx = 10, pady = 10, sticky = 'nw')
        self.entryValue.grid(row = 1, column = 1, padx = 10, pady = 10, sticky = 'nw')
        self.buttonApply.grid(row = 1, column = 2, padx = 10, pady = 10, sticky = 'nw')
        self.checkButtonUseGridProp.grid(row = 2, column = 2, padx = 10, pady = 10, sticky = 'nwe', columnspan = 2)
        self.checkButtonDeleteProp.grid(row = 2, column = 0, padx = 10, pady = 10, sticky = 'nwe', columnspan = 2)
        self.checkButtonGenerateMenu.grid(row = 3, column = 0, padx = 10, pady = 10, sticky = 'nw', columnspan = 2)
        # Setting bindings
        self.layoutViewFrame.bind('<Button-1>', func = lambda event: [self.viewFrameOnClick(event), self.clearSelectionTreeView(event, self.treeViewProperties)])
        self.entryValue.bind('<Return>', self.applyProperty)
        self.bind('<Button-1>', func = lambda event: self.clearSelectionTreeView(event, self.treeViewProperties))
        #self.showDimensionsDialog()


    def showProgramInfo(self):
        pass


    def showTutorial(self):
        pass


    def generatePythonFile(self):
        confirmSave = messagebox.askyesno(title = 'Save To JSON', message = 'File must be saved to JSON format in the given JSON path before generating. Do you want to continue?')
        confirmAll = False
        if confirmSave:
            listName = list(self.widgetNameDict.values())
            listNameUnique = list(set(listName))
            if len(listName) == len(listNameUnique):
                confirmAll = True
            else:
                confirmAll = messagebox.showwarning(title = 'Error', message = 'Names of widgets must be unique! Change names of widgets to generate Python file.')
            self.saveLayoutToFile()
        if confirmAll:
            with open('config.json', 'r') as file:
                data = json.load(file)
                pathGenerate = data.get('Generating file name')
                pathJSONLayout = data.get('JSON file name')
            with open(pathJSONLayout, 'r') as file:
                data = json.load(file)
                pythonString = defaultString
                pythonString += f'        self.geometry("{data.get("Window")[0].get("width")}x{data.get("Window")[0].get("height")}")\n'
                for key, value in data.items():
                    if key == 'Button':
                        for button in value:
                            pythonString += f'        self.{button.get("name")} = tk.Button(master = self, text = "{button.get("text")}", width = {button.get("width")}, height = {button.get("height")}, background = "{button.get("background")}", state = "{button.get("state")}", cursor = "{button.get("cursor")}")\n'
                            pythonString += f'        self.{button.get("name")}.place(x = {button.get("x")}, y = {button.get("y")})\n'
                    if key == 'Frame':
                        for frame in value:
                            pythonString += f'        self.{frame.get("name")} = tk.Frame(master = self, width = {frame.get("width")}, height = {frame.get("height")}, background = "{frame.get("background")}")\n'
                            pythonString += f'        self.{frame.get("name")}.place(x = {frame.get("x")}, y = {frame.get("y")})\n'
                    if key == 'Label':
                        for label in value:
                            pythonString += f'        self.{label.get("name")} = tk.Label(master = self, text = "{label.get("text")}")\n'
                            pythonString += f'        self.{label.get("name")}.place(x = {label.get("x")}, y = {label.get("y")})\n'
                    if key == 'Checkbutton':
                        for checkbutton in value:
                            pythonString += f'        self.{checkbutton.get("name")} = tk.Checkbutton(master = self, text = "{checkbutton.get("text")}", width = {checkbutton.get("width")}, height = {checkbutton.get("height")}, background = "{checkbutton.get("background")}")\n'
                            pythonString += f'        self.{checkbutton.get("name")}.place(x = {checkbutton.get("x")}, y = {checkbutton.get("y")})\n'
                    if key == 'Radiobutton':
                        for radiobutton in value:
                            pythonString += f'        self.{radiobutton.get("name")} = tk.Radiobutton(master = self, text = "{radiobutton.get("text")}", width = {radiobutton.get("width")}, height = {radiobutton.get("height")}, background = "{radiobutton.get("background")}")\n'
                            pythonString += f'        self.{radiobutton.get("name")}.place(x = {radiobutton.get("x")}, y = {radiobutton.get("y")})\n'
                    if key == 'Entry':
                        for entry in value:
                            pythonString += f'        self.{entry.get("name")} = tk.Entry(master = self, width = {entry.get("width")}, state = "{entry.get("state")}", background = "{entry.get("background")}")\n'
                            pythonString += f'        self.{entry.get("name")}.place(x = {entry.get("x")}, y = {entry.get("y")})\n'
                    if key == 'Combobox':
                        for combobox in value:
                            pythonString += f'        self.{combobox.get("name")} = ttk.Combobox(master = self, width = {combobox.get("width")}, state = "{combobox.get("state")}")\n'
                            pythonString += f'        self.{combobox.get("name")}.place(x = {combobox.get("x")}, y = {combobox.get("y")})\n'
                    if key == 'Listbox':
                        for listbox in value:
                            pythonString += f'        self.{listbox.get("name")} = tk.Listbox(master = self, width = {listbox.get("width")}, height = {listbox.get("height")}, background = "{listbox.get("background")}")\n'
                            pythonString += f'        self.{listbox.get("name")}.place(x = {listbox.get("x")}, y = {listbox.get("y")})\n'
                    if key == 'Scrollbar':
                        for scrollbar in value:
                            pythonString += f'        self.{scrollbar.get("name")} = tk.Scrollbar(master = self, width = {scrollbar.get("width")}, orient = "{scrollbar.get("orient")}")\n'
                            pythonString += f'        self.{scrollbar.get("name")}.place(x = {scrollbar.get("x")}, y = {scrollbar.get("y")})\n'
                    if key == 'Text':
                        for text in value:
                            pythonString += f'        self.{text.get("name")} = tk.Text(master = self, width = {text.get("width")}, height = {text.get("height")}, background = "{text.get("background")}")\n'
                            pythonString += f'        self.{text.get("name")}.place(x = {text.get("x")}, y = {text.get("y")})\n'
                    if key == 'Scale':
                        for scale in value:
                            pythonString += f'        self.{scale.get("name")} = tk.Scale(master = self, length = {scale.get("length")}, orient = "{scale.get("orient")}")\n'
                            pythonString += f'        self.{scale.get("name")}.place(x = {scale.get("x")}, y = {scale.get("y")})\n'
                    if key == 'Spinbox':
                        for spinbox in value:
                            pythonString += f'        self.{spinbox.get("name")} = tk.Spinbox(master = self, width = {spinbox.get("width")}, state = "{spinbox.get("state")}", to = {spinbox.get("to")})\n'
                            pythonString += f'        self.{spinbox.get("name")}.place(x = {spinbox.get("x")}, y = {spinbox.get("y")})\n'
                    if key == 'Progressbar':
                        for progressbar in value:
                            pythonString += f'        self.{progressbar.get("name")} = ttk.Progressbar(master = self, orient = "{progressbar.get("orient")}", length = {progressbar.get("length")}, mode = "{progressbar.get("mode")}")\n'
                            pythonString += f'        self.{progressbar.get("name")}.place(x = {progressbar.get("x")}, y = {progressbar.get("y")})\n'
                    if key == 'Separator':
                        for separator in value:
                            pythonString += f'        self.{separator.get("name")} = ttk.Separator(master = self, orient = "{separator.get("orient")}", width = {separator.get("width")}, height = {separator.get("height")})\n'
                            pythonString += f'        self.{separator.get("name")}.place(x = {separator.get("x")}, y = {separator.get("y")})\n'
                    if key == 'Label Frame':
                        for labelframe in value:
                            pythonString += f'        self.{labelframe.get("name")} = tk.LabelFrame(master = self, text = "{labelframe.get("text")}", width = {labelframe.get("width")}, height = {labelframe.get("height")}, background = "{labelframe.get("background")}")\n'
                            pythonString += f'        self.{labelframe.get("name")}.place(x = {labelframe.get("x")}, y = {labelframe.get("y")})\n'
                    if key == 'Paned Window':
                        for panedwindow in value:
                            pythonString += f'        self.{panedwindow.get("name")} = tk.PanedWindow(master = self, orient = "{panedwindow.get("orient")}", height = {panedwindow.get("height")}, width = {panedwindow.get("width")})\n'
                            pythonString += f'        self.{panedwindow.get("name")}.place(x = {panedwindow.get("x")}, y = {panedwindow.get("y")})\n'
                    if key == 'Notebook':
                        for notebook in value:
                            pythonString += f'        self.{notebook.get("name")} = ttk.Notebook(master = self, height = {notebook.get("height")}, width = {notebook.get("width")})\n'
                            pythonString += f'        page1 = tk.Frame(master = self.{notebook.get("name")})\n'
                            pythonString += f'        page2 = tk.Frame(master = self.{notebook.get("name")})\n'
                            pythonString += f'        self.{notebook.get("name")}.add(child = page1, text = "{notebook.get("text1")}")\n'
                            pythonString += f'        self.{notebook.get("name")}.add(child = page2, text = "{notebook.get("text2")}")\n'
                            pythonString += f'        self.{notebook.get("name")}.place(x = {notebook.get("x")}, y = {notebook.get("y")})\n'
                    if key == 'Canvas':
                        for canvas in value:
                            pythonString += f'        self.{canvas.get("name")} = tk.Canvas(master = self, width = {canvas.get("width")}, height = {canvas.get("height")}, background = "{canvas.get("background")}")\n'
                            pythonString += f'        self.{canvas.get("name")}.place(x = {canvas.get("x")}, y = {canvas.get("y")})\n'
                    if key == 'Treeview':
                        for treeview in value:
                            pythonString += f'        self.{treeview.get("name")} = ttk.Treeview(master = self, height = {treeview.get("height")}, show = "headings")\n'
                            pythonString += f'        self.{treeview.get("name")}.place(x = {treeview.get("x")}, y = {treeview.get("y")})\n'
                            pythonString += f'        self.{treeview.get("name")}["columns"] = ("Treeview")\n'
                            pythonString += f'        self.{treeview.get("name")}.heading("Treeview", text = "Treeview")\n'    
        
            if self.checkGenerateMenu.get():
                pythonString += '\n        self.option_add("*tearOff", False)'
                with open('menuBar.json', 'r') as file:
                    data = json.load(file)
                    menus = data.get('Menus')
                    submenus = data.get('Submenus')
                    pythonString += '\n\n        self.menuMain = tk.Menu(master = self)\n'
                    for i, menu in enumerate(menus):
                        pythonString = pythonString + f'        self.menu{menu} = tk.Menu(master = self.menuMain)\n'
                        for submenu in submenus[i]:
                            pythonString = pythonString + f'        self.menu{menu}.add_command(label = "{submenu}")\n'
                        pythonString = pythonString + f'        self.menuMain.add_cascade(menu = self.menu{menu}, label = "{menu}")\n'
                    pythonString = pythonString + f'        self["menu"] = self.menuMain\n'

            pythonString += '\n\nif __name__ == "__main__":\n    app = App()\n    app.mainloop()'
            with open(pathGenerate, 'w') as file:
                file.write(pythonString)
        
        

    def configureGeneratingPath(self):
        generatingPath = filedialog.asksaveasfilename(title = 'Select Python file', filetypes = [('Python files', '*.py')])
        with open('config.json', 'r') as file:
            data = json.load(file)
            data['Generating file name'] = generatingPath
        with open('config.json', 'w') as file:
            json.dump(data, file, indent = 4)


    def configureJSONPath(self):
        JSONPath = filedialog.asksaveasfilename(title = 'Select JSON file', filetypes = [('JSON files', '*.json')])
        with open('config.json', 'r') as file:
            data = json.load(file)
            data['JSON file name'] = JSONPath
        with open('config.json', 'w') as file:
            json.dump(data, file, indent = 4)


    def viewFrameOnClick(self, event):
        widgetChoice = None
        
        idx = self.listboxWidgets.curselection()
        if len(idx) != 0:
            widgetChoice = self.widgetsNameList[idx[0]]
            self.listboxWidgets.selection_clear(self.listboxWidgets.curselection())
        whichNotebook = self.notebook.select()
        canAddWidget = True
        if whichNotebook == '.!notebook.!frame':
            canAddWidget = True
        elif whichNotebook == '.!notebook.!frame2':
            canAddWidget = False
        
        if widgetChoice is not None and canAddWidget:
            x = self.winfo_pointerx()
            y = self.winfo_pointery()
            abs_x = x - self.layoutViewFrame.winfo_rootx()
            abs_y = y - self.layoutViewFrame.winfo_rooty()
            widget = None
            widgetClickedID = None
            name = None
            match widgetChoice:
                case 'Button':
                    widget = tk.Button(master = self.layoutViewFrame, width=10, text=f'Button{self.buttonIter.next()}')
                    widgetClickedID = WidgetEnum.BUTTON
                    name = f'Button{self.buttonIter.iter}' 
                case 'Frame':
                    widget = tk.Frame(master = self.layoutViewFrame, width=100, height=100 ,borderwidth=3)
                    widgetClickedID = WidgetEnum.FRAME
                    name = f'Frame{self.frameIter.next()}'
                case 'Label':
                    widget = tk.Label(master = self.layoutViewFrame, text = f'Label{self.labelIter.next()}')
                    widgetClickedID = WidgetEnum.LABEL
                    name = f'Label{self.labelIter.iter}'
                case 'Checkbutton':
                    widget = tk.Checkbutton(master = self.layoutViewFrame, text = f'Checkbutton{self.checkbuttonIter.next()}')
                    widgetClickedID = WidgetEnum.CHECKBUTTON
                    name = f'Checkbutton{self.checkbuttonIter.iter}'
                case 'Radiobutton':
                    widget = tk.Radiobutton(master = self.layoutViewFrame, text = f'Radiobutton{self.radiobuttonIter.next()}')
                    widgetClickedID = WidgetEnum.RADIOBUTTON
                    name = f'Radiobutton{self.radiobuttonIter.iter}'
                case 'Entry':
                    widget = tk.Entry(master = self.layoutViewFrame)
                    widgetClickedID = WidgetEnum.ENTRY
                    name = f'Entry{self.entryIter.next()}'
                case 'Combobox':
                    widget = ttk.Combobox(master = self.layoutViewFrame)
                    widgetClickedID = WidgetEnum.COMBOBOX
                    name = f'Combobox{self.comboboxIter.next()}'
                case 'Listbox':
                    widget = tk.Listbox(master = self.layoutViewFrame)
                    widgetClickedID = WidgetEnum.LISTBOX
                    name = f'Listbox{self.listboxIter.next()}'
                case 'Scrollbar':
                    widget = tk.Scrollbar(master = self.layoutViewFrame, width = 20, orient = 'vertical')
                    widgetClickedID = WidgetEnum.SCROLLBAR
                    name = f'Scrollbar{self.scrollbarIter.next()}'
                case 'Text':
                    widget = tk.Text(master = self.layoutViewFrame)
                    widgetClickedID = WidgetEnum.TEXT
                    name = f'Text{self.textIter.next()}'
                case 'Scale':
                    widget = tk.Scale(master = self.layoutViewFrame, length = 100, orient = 'horizontal')
                    widgetClickedID = WidgetEnum.SCALE
                    name = f'Scale{self.scaleIter.next()}'
                case 'Spinbox':
                    widget = tk.Spinbox(master = self.layoutViewFrame)
                    widgetClickedID = WidgetEnum.SPINBOX
                    name = f'Spinbox{self.spinboxIter.next()}'
                case 'Progressbar':
                    widget = ttk.Progressbar(master = self.layoutViewFrame, orient = 'horizontal', length = 100, mode = 'determinate')
                    widgetClickedID = WidgetEnum.PROGRESSBAR
                    name = f'Progressbar{self.progressbarIter.next()}'
                case 'Menu':
                    self.windowMenuConfig.deiconify()
                    self.windowMenuConfig.grab_set()
                    messagebox.showinfo(title = 'Menu Config Information', message = 'To add menu bar to your application, you have to configure it in additional window. The menu bar will not show in main window, but will be generated after configuration.')
                    widgetClickedID = WidgetEnum.MENU
                    name = 'Menu'
                case 'Separator':
                    widget = ttk.Separator(master = self.layoutViewFrame, orient = 'horizontal')
                    widget.width = 200
                    widget.height = 5
                    widget.place(x = abs_x, y = abs_y, width = 200, height = 5)
                    widgetClickedID = WidgetEnum.SEPARATOR
                    name = f'Separator{self.separatorIter.next()}'
                case 'Label Frame':
                    widget = tk.LabelFrame(master = self.layoutViewFrame, text = f'Label Frame{self.labelframeIter.next()}', width = 100, height = 100)
                    widgetClickedID = WidgetEnum.LABELFRAME
                    name = f'LabelFrame{self.labelframeIter.next()}'
                case 'Paned Window':
                    widget = tk.PanedWindow(master = self.layoutViewFrame, orient = 'horizontal', height = 100, width = 100)
                    widgetClickedID = WidgetEnum.PANEDWINDOW
                    name = f'PanedWindow{self.panedwindowIter.next()}'
                case 'Notebook':
                    widget = ttk.Notebook(master = self.layoutViewFrame, height = 100, width = 100)
                    page1 = tk.Frame(master = widget)
                    page2 = tk.Frame(master = widget)
                    widget.add(child = page1, text = 'Page1')
                    widget.add(child = page2, text = 'Page2')
                    widgetClickedID = WidgetEnum.NOTEBOOK
                    name = f'Notebook{self.notebookIter.next()}'
                case 'Canvas':
                    widget = tk.Canvas(master = self.layoutViewFrame, width = 100, height = 100)
                    widgetClickedID = WidgetEnum.CANVAS
                    name = f'Canvas{self.canvasIter.next()}'
                case 'Treeview':
                    widget = ttk.Treeview(master = self.layoutViewFrame, height = 5, show = 'headings')
                    widget['columns'] = ('Treeview')
                    widget.column('Treeview', width = 200, anchor = 'w')
                    widget.heading('Treeview', text = 'Treeview')
                    widgetClickedID = WidgetEnum.TREEVIEW
                    name = f'Treeview{self.treeviewIter.next()}'
            if widget is not None:
                widget.place(x = abs_x, y = abs_y)
                self.widgetNameDict.update({widget.winfo_id(): name})
                print(self.widgetNameDict.keys())  
                widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, widgetClickedID))
                widget.bind('<B1-Motion>', func = self.onDrag)
                widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                

    def widgetOnClick(self, event, widgetClickedID) -> None:
        widget = event.widget
        if self.delete.get():
            widget.destroy()
        elif not self.useGrid.get():
            widget.start_x = event.x
            widget.start_y = event.y
            widget.focus_set()
        if not self.delete.get():
            self.widgetClicked = widget
            self.widgetClickedID = widgetClickedID
            self.loadCorrectProperties()
            self.loadActualProperties()


    def onDrag(self, event):
        """Update the widget's position as the mouse is moved."""
        if not self.useGrid.get():
            widget = event.widget
            dx = event.x - widget.start_x
            dy = event.y - widget.start_y
            widget.place(x=widget.winfo_x() + dx, y=widget.winfo_y() + dy)
            self.loadActualProperties()


    def onStopDrag(self, event):
        pass

    
    def changeCursor(self):
        if self.delete.get():
            self.config(cursor='pirate')
        else:
            self.config(cursor = 'arrow')


    def addMenu(self):
        submenuName = self.entryMenu.get()
        parentID = self.treeViewMenus.selection()
        if not self.checkMenuExists(menuName = submenuName, parentID = parentID):
            if submenuName != '':
                if len(parentID) == 0:
                    self.treeViewMenus.insert(parent = parentID, index = 'end', text = submenuName)
                else:
                    if len(self.treeViewMenus.parent(parentID)) == 0:
                        self.treeViewMenus.insert(parent = parentID, index = 'end', text = submenuName)
                    

    def checkMenuExists(self, menuName: str, parentID: str = None) -> bool:
        """
        Function checks if the given name is a child of the given parent.
        If parent = None function will check main items
        If parent is not None function will check names of all of children.
        """
        exists = False
        ids = self.treeViewMenus.get_children(parentID)
        itemsDict = [self.treeViewMenus.item(id) for id in ids]
        for item in itemsDict:
            if item.get('text') == menuName:
                exists = True
                messagebox.showwarning(title = 'Error', message = 'Menu with that name already exists! Change name of the new menu')
                break
        return exists
    

    def deleteMenu(self):
        selectedItemID = self.treeViewMenus.selection()
        confirm = False
        if len(self.treeViewMenus.get_children(selectedItemID)) > 0:
            confirm = messagebox.askyesno(title = 'Question', message = f'Selected item is not empty, do you want to delete it anyway?')
            if confirm:
                self.treeViewMenus.delete(selectedItemID)
        else:   self.treeViewMenus.delete(selectedItemID)


    def generateMenu(self) -> None:
        menuList = []
        submenuList = []
        submenusName = []
        ids = self.treeViewMenus.get_children()
        menusName = [self.treeViewMenus.item(id).get('text') for id in ids]
        for id in ids:
            subIds = self.treeViewMenus.get_children(id)
            submenuName = [self.treeViewMenus.item(subId).get('text') for subId in subIds]
            submenusName.append(submenuName)
        print(f'Menus: {menusName}\nSubmenus:{submenusName}')
        if len(menusName) == 0:
            pass
        else:
            mainMenuBar = tk.Menu(self.windowMenuConfig)
            self.windowMenuConfig['menu'] = mainMenuBar
            for i, name in enumerate(menusName):
                menu = tk.Menu(master = mainMenuBar)
                mainMenuBar.add_cascade(menu = menu, label = name)
                for subname in submenusName[i]:
                    menu.add_command(label = subname)
        self.saveMenuToJson(menuList = menusName, submenuList = submenusName)
        

    def clearSelectionTreeView(self, event, treeview):
        region = treeview.identify_region(event.x, event.y)
        if region == "nothing":
            treeview.selection_remove(treeview.selection())


    def saveMenuToJson(self, menuList: list, submenuList: list) -> None:
        data = {'Menus':menuList, 'Submenus':submenuList}
        with open(r'.\menuBar.json', 'w') as file:
            dataJson = json.dumps(data)
            file.write(dataJson)


    def hideWindow(self, window):
        window.withdraw()
        self.grab_set()


    def loadActualProperties(self) -> None:
        self.treeViewProperties.item(item = 'Name', values = ('Name', self.widgetNameDict.get(self.widgetClicked.winfo_id())))
        self.treeViewProperties.item(item = 'Position X', values = ('Position X', self.widgetClicked.winfo_x()))
        self.treeViewProperties.item(item = 'Position Y', values = ('Position Y', self.widgetClicked.winfo_y()))
        self.treeViewProperties.item(item = 'Cursor', values = ('Cursor', self.widgetClicked.cget('cursor')))
        match self.widgetClickedID:
            case WidgetEnum.BUTTON | WidgetEnum.LABEL | WidgetEnum.CHECKBUTTON | WidgetEnum.RADIOBUTTON:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Text', values = ('Text', self.widgetClicked.cget('text')))
                self.treeViewProperties.item(item = 'State', values = ('State', self.widgetClicked.cget('state')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.SCROLLBAR:
                self.treeViewProperties.item(item = 'Orient', values = ('Orient', self.widgetClicked.cget('orient')))
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
            case WidgetEnum.SEPARATOR:
                self.treeViewProperties.item(item = 'Orient', values = ('Orient', self.widgetClicked.cget('orient')))
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.width))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.height))
            case WidgetEnum.PANEDWINDOW:
                self.treeViewProperties.item(item = 'Orient', values = ('Orient', self.widgetClicked.cget('orient')))
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.SCALE:
                self.treeViewProperties.item(item = 'Orient', values = ('Orient', self.widgetClicked.cget('orient')))
                self.treeViewProperties.item(item = 'Label', values = ('Label', self.widgetClicked.cget('label')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.PROGRESSBAR:
                self.treeViewProperties.item(item = 'Orient', values = ('Orient', self.widgetClicked.cget('orient')))
                self.treeViewProperties.item(item = 'Mode', values = ('Mode', self.widgetClicked.cget('mode')))
            case WidgetEnum.LABELFRAME:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Text', values = ('Text', self.widgetClicked.cget('text')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.FRAME:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.ENTRY:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'State', values = ('State', self.widgetClicked.cget('state')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.COMBOBOX:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
            case WidgetEnum.LISTBOX:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.TEXT:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.SCALE:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Length', values = ('Length', self.widgetClicked.cget('length')))
                self.treeViewProperties.item(item = 'Label', values = ('Label', self.widgetClicked.cget('label')))
                self.treeViewProperties.item(item = 'Orient', values = ('Orient', self.widgetClicked.cget('orient')))
                self.treeViewProperties.item(item = 'From', values = ('From', self.widgetClicked.cget('from_')))
                self.treeViewProperties.item(item = 'To', values = ('To', self.widgetClicked.cget('to')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.SPINBOX:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'State', values = ('State', self.widgetClicked.cget('state')))
                self.treeViewProperties.item(item = 'To', values = ('To', self.widgetClicked.cget('to')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.NOTEBOOK:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
            case WidgetEnum.CANVAS:
                self.treeViewProperties.item(item = 'Width', values = ('Width', self.widgetClicked.cget('width')))
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))
                self.treeViewProperties.item(item = 'Background', values = ('Background', self.widgetClicked.cget('background')))
            case WidgetEnum.TREEVIEW:
                self.treeViewProperties.item(item = 'Height', values = ('Height', self.widgetClicked.cget('height')))


    def loadCorrectProperties(self) -> None:
        for item in self.treeViewProperties.get_children():
            self.treeViewProperties.detach(item)
        
        self.treeViewProperties.reattach(item = 'Name', parent = '', index = 'end')
        self.treeViewProperties.reattach(item = 'Position X', parent = '', index = 'end')
        self.treeViewProperties.reattach(item = 'Position Y', parent = '', index = 'end')
        self.treeViewProperties.reattach(item = 'Cursor', parent = '', index = 'end')
        
        match self.widgetClickedID:
            case WidgetEnum.BUTTON | WidgetEnum.LABEL | WidgetEnum.CHECKBUTTON | WidgetEnum.RADIOBUTTON:
                self.treeViewProperties.reattach(item = 'Text', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
            case WidgetEnum.PANEDWINDOW:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Orient', parent = '', index = 'end')
                
            case WidgetEnum.SEPARATOR:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Orient', parent = '', index = 'end')
            case WidgetEnum.PROGRESSBAR:
                self.treeViewProperties.reattach(item = 'Length', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Orient', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Mode', parent = '', index = 'end')
            case WidgetEnum.LABELFRAME:
                self.treeViewProperties.reattach(item = 'Text', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
            case WidgetEnum.FRAME:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
            case WidgetEnum.ENTRY:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'State', parent = '', index = 'end')
            case WidgetEnum.COMBOBOX:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
            case WidgetEnum.LISTBOX:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
            case WidgetEnum.SCROLLBAR:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Orient', parent = '', index = 'end')
            case WidgetEnum.TEXT:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
            case WidgetEnum.SCALE:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Length', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Label', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Orient', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'From', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'To', parent = '', index = 'end')
            case WidgetEnum.SPINBOX:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'State', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'To', parent = '', index = 'end')
            case WidgetEnum.NOTEBOOK:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
            case WidgetEnum.CANVAS:
                self.treeViewProperties.reattach(item = 'Width', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
                self.treeViewProperties.reattach(item = 'Background', parent = '', index = 'end')
            case WidgetEnum.TREEVIEW:
                self.treeViewProperties.reattach(item = 'Height', parent = '', index = 'end')
            case _:
                pass
                

    def insertPropertiesToTree(self) -> None:
        self.treeViewProperties.insert('', 'end', values = ('Name', ''), iid = 'Name')
        self.treeViewProperties.insert('', 'end', values = ('Cursor', ''), iid = 'Cursor')
        self.treeViewProperties.insert('', 'end', values = ('Text', ''), iid = 'Text')
        self.treeViewProperties.insert('', 'end', values = ('State', ''), iid = 'State')
        self.treeViewProperties.insert('', 'end', values = ('Width', ''), iid = 'Width')
        self.treeViewProperties.insert('', 'end', values = ('Height', ''), iid = 'Height')
        self.treeViewProperties.insert('', 'end', values = ('Orient', ''), iid = 'Orient')
        self.treeViewProperties.insert('', 'end', values = ('Mode', ''), iid = 'Mode')
        self.treeViewProperties.insert('', 'end', values = ('Label', ''), iid = 'Label')
        self.treeViewProperties.insert('', 'end', values = ('Length', ''), iid = 'Length')
        self.treeViewProperties.insert('', 'end', values = ('Position X', ''), iid = 'Position X')
        self.treeViewProperties.insert('', 'end', values = ('Position Y', ''), iid = 'Position Y')
        self.treeViewProperties.insert('', 'end', values = ('From', ''), iid = 'From')
        self.treeViewProperties.insert('', 'end', values = ('To', ''), iid = 'To')
        self.treeViewProperties.insert('', 'end', values = ('Background', ''), iid = 'Background')
        for item in self.treeViewProperties.get_children():
            self.treeViewProperties.detach(item)


    def applyProperty(self, event = None):
        itemID = self.treeViewProperties.selection()
        selected = False
        newValue = ''
        if len(itemID) >= 1:
            selected = True
            itemID = self.treeViewProperties.selection()[0]
        else: itemID = None
        if selected:
            newValue = self.entryValue.get()
            self.treeViewProperties.item(item= itemID, values=(itemID, newValue))
        self.applyPropertyToWidget(itemID = itemID, value = newValue)
        

    def applyPropertyToWidget(self, itemID: str = None, value: str = None) -> None:
        if itemID is not None and value is not None:
            try:
                match itemID:
                    case 'Text':
                        self.widgetClicked.configure(text = value)
                    case 'Position X':
                        self.widgetClicked.place(in_ = self.layoutViewFrame, x = value)
                    case 'Position Y':
                        self.widgetClicked.place(y = value)
                    case 'Name':
                        self.widgetNameDict.update({self.widgetClicked.winfo_id(): value})
                    case 'Cursor':
                        self.widgetClicked.configure(cursor = value)
                    case 'State':
                        self.widgetClicked.configure(state = value)
                    case 'Width':
                        if self.widgetClickedID == WidgetEnum.SEPARATOR:
                            self.widgetClicked.width = value
                            self.widgetClicked.place(width = value)
                        else:
                            self.widgetClicked.configure(width = value)
                    case 'Height':
                        if self.widgetClickedID == WidgetEnum.SEPARATOR:
                            self.widgetClicked.height = value
                            self.widgetClicked.place(height = value)
                        else:
                            self.widgetClicked.configure(height = value)
                    case 'Orient':
                        if self.widgetClickedID == WidgetEnum.SEPARATOR:
                            tempHeight = self.widgetClicked.height
                            tempWidth = self.widgetClicked.width
                            self.widgetClicked.height = tempWidth
                            self.widgetClicked.width = tempHeight
                            self.loadActualProperties()
                            self.widgetClicked.place(width = self.widgetClicked.width, height = self.widgetClicked.height)
                        else:
                            self.widgetClicked.configure(orient = value)
                    case 'Mode':
                        self.widgetClicked.configure(mode = value)
                    case 'Label':
                        self.widgetClicked.configure(label = value)
                    case 'Length':
                        self.widgetClicked.configure(length = value)
                    case 'From':
                        self.widgetClicked.config(from_ = value)
                    case 'To':
                        self.widgetClicked.configure(to = value)
                    case 'Heading':
                        self.widgetClicked.heading('Treeview', text = value)
                    case 'Background':
                        self.widgetClicked.configure(background = value)  
            except:
                messagebox.showerror(title = 'Error', message = 'Incorrect value. Try again.')
    
    def applyDimensions(self):
        width = int(self.spinboxWidth.get())
        height = int(self.spinboxHeight.get())
        self.layoutViewFrame.configure(width = width, height = height)
        self.windowDimensions.withdraw()
        self.grab_set()


    def loadLayoutFromFile(self):
        try:
            with open('config.json', 'r') as configFile:
                data = json.load(configFile)
                path = data.get('JSON file name')
            with open(path, 'r') as file:
                data = json.load(file)
        except:
            messagebox.showerror('Loading error', message = 'There was an error during loading from JSON file. Try to reconfigure JSON file path.')
        for keys, values in data.items():
            print(keys, values)
            if keys == 'Window':
                for window in values:
                    self.layoutViewFrame.config(width = window.get('width'), height = window.get('height'))
            elif keys == 'Button':
                for button in values:
                    widget = tk.Button(master = self.layoutViewFrame, text = button.get('text'), width = button.get('width'), height = button.get('height'), state = button.get('state'), background = button.get('background'))
                    widget.place(x = button.get('x'), y = button.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.BUTTON))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): button.get('name')})
            elif keys == 'Frame':
                for frame in values:
                    widget = tk.Frame(master = self.layoutViewFrame, width = frame.get('width'), height = frame.get('height'), background = frame.get('background'))
                    widget.place(x = frame.get('x'), y = frame.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.FRAME))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): frame.get('name')})
            elif keys == 'Label':
                for label in values:
                    widget = tk.Label(master = self.layoutViewFrame, text = label.get('text'), width = label.get('width'), height = label.get('height'), background = label.get('background'))
                    widget.place(x = label.get('x'), y = label.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.LABEL))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): label.get('name')})
            elif keys == 'Checkbutton':
                for checkbutton in values:
                    widget = tk.Checkbutton(master = self.layoutViewFrame, text = checkbutton.get('text'), width = checkbutton.get('width'), height = checkbutton.get('height'), background = checkbutton.get('background'))
                    widget.place(x = checkbutton.get('x'), y = checkbutton.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.CHECKBUTTON))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): checkbutton.get('name')})
            elif keys == 'Radiobutton':
                for radiobutton in values:
                    widget = tk.Radiobutton(master = self.layoutViewFrame, text = radiobutton.get('text'), width = radiobutton.get('width'), height = radiobutton.get('height'), background = radiobutton.get('background'))
                    widget.place(x = radiobutton.get('x'), y = radiobutton.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.RADIOBUTTON))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): radiobutton.get('name')})
            elif keys == 'Entry':
                for entry in values:
                    widget = tk.Entry(master = self.layoutViewFrame, width = entry.get('width'), background = entry.get('background'), state = entry.get('state'))
                    widget.place(x = entry.get('x'), y = entry.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.ENTRY))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): entry.get('name')})
            elif keys == 'Combobox':
                for combobox in values:
                    widget = ttk.Combobox(master = self.layoutViewFrame, width = combobox.get('width'))
                    widget.place(x = combobox.get('x'), y = combobox.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.COMBOBOX))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): combobox.get('name')})
            elif keys == 'Listbox':
                for listbox in values:
                    widget = tk.Listbox(master = self.layoutViewFrame, width = listbox.get('width'), height = listbox.get('height'), background = listbox.get('background'))
                    widget.place(x = listbox.get('x'), y = listbox.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.LISTBOX))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): listbox.get('name')})
            elif keys == 'Scrollbar':
                for scrollbar in values:
                    widget = tk.Scrollbar(master = self.layoutViewFrame, width = scrollbar.get('width'), orient = scrollbar.get('orient'))
                    widget.place(x = scrollbar.get('x'), y = scrollbar.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.SCROLLBAR))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): scrollbar.get('name')})
            elif keys == 'Text':
                for text in values:
                    widget = tk.Text(master = self.layoutViewFrame, width = text.get('width'), height = text.get('height'), background = text.get('background'))
                    widget.place(x = text.get('x'), y = text.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.TEXT))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): text.get('name')})
            elif keys == 'Scale':
                for scale in values:
                    widget = tk.Scale(master = self.layoutViewFrame, width = scale.get('width'), background = scale.get('background'), length = scale.get('length'), label = scale.get('label'), orient = scale.get('orient'), from_ = scale.get('from'), to = scale.get('to'))
                    widget.place(x = scale.get('x'), y = scale.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.SCALE))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): scale.get('name')})
            elif keys == 'Spinbox':
                for spinbox in values:
                    widget = tk.Spinbox(master = self.layoutViewFrame, width = spinbox.get('width'), background = spinbox.get('background'), state = spinbox.get('state'), to = spinbox.get('to'))
                    widget.place(x = spinbox.get('x'), y = spinbox.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.SPINBOX))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): spinbox.get('name')})
            elif keys == 'Progressbar':
                for progressbar in values:
                    widget = ttk.Progressbar(master = self.layoutViewFrame, length = progressbar.get('length'), orient = progressbar.get('orient'), mode = progressbar.get('mode'))
                    widget.place(x = progressbar.get('x'), y = progressbar.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.PROGRESSBAR))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): progressbar.get('name')})
            elif keys == 'Menu':
                for menu in values:
                    widget = tk.Menu(master = self.layoutViewFrame)
                    widget.place(x = menu.get('x'), y = menu.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.MENU))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): menu.get('name')})
            elif keys == 'Separator':
                for separator in values:
                    widget = ttk.Separator(master = self.layoutViewFrame, width = separator.get('width'), height = separator.get('height'), orient = separator.get('orient'))
                    widget.place(x = separator.get('x'), y = separator.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.SEPARATOR))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): separator.get('name')})
            elif keys == 'Label Frame':
                for labelframe in values:
                    widget = ttk.LabelFrame(master = self.layoutViewFrame, width = labelframe.get('width'), height = labelframe.get('height'), text = labelframe.get('text'), background = labelframe.get('background'))
                    widget.place(x = labelframe.get('x'), y = labelframe.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.LABELFRAME))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): labelframe.get('name')})
            elif keys == 'Paned Window':
                for panedwindow in values:
                    widget = ttk.PanedWindow(master = self.layoutViewFrame, width = panedwindow.get('width'), height = panedwindow.get('height'), orient = panedwindow.get('orient'), background = panedwindow.get('background'))
                    widget.place(x = panedwindow.get('x'), y = panedwindow.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.PANEDWINDOW))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): panedwindow.get('name')})
            elif keys == 'Notebook':
                for notebook in values:
                    widget = ttk.Notebook(master = self.layoutViewFrame, width = notebook.get('width'), height = notebook.get('height'))
                    widget.place(x = notebook.get('x'), y = notebook.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.NOTEBOOK))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): notebook.get('name')})
            elif keys == 'Canvas':
                for canvas in values:
                    widget = tk.Canvas(master = self.layoutViewFrame, width = canvas.get('width'), height = canvas.get('height'), background = canvas.get('background'))
                    widget.place(x = canvas.get('x'), y = canvas.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.CANVAS))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): canvas.get('name')})
            elif keys == 'Treeview':
                for treeview in values:
                    widget = ttk.Treeview(master = self.layoutViewFrame, height = treeview.get('height'))
                    widget.place(x = treeview.get('x'), y = treeview.get('y'))
                    widget.bind('<Button-1>', func = lambda event : self.widgetOnClick(event, WidgetEnum.TREEVIEW))
                    widget.bind('<B1-Motion>', func = self.onDrag)
                    widget.bind('<ButtonRelease-1>', func = self.onStopDrag)
                    self.widgetNameDict.update({widget.winfo_id(): treeview.get('name')})
            

    def saveLayoutToFile(self):
        path = ''
        try:
            with open('config.json', 'r') as configFile:
                data = json.load(configFile)
                path = data.get('JSON file name')
        except:
            messagebox.showerror('Saving error', message = 'There was an error during saving to JSON file. Try to reconfigure JSON file path.')
        widgetsList = self.layoutViewFrame.children
        
        dataToSave = {
            'Button': [],
            'Frame': [],
            'Label': [],
            'Checkbutton': [],
            'Radiobutton': [],
            'Entry': [],
            'Combobox': [],
            'Listbox': [],
            'Scrollbar': [],
            'Text': [],
            'Scale': [],
            'Spinbox': [],
            'Progressbar': [],
            'Menu': [],
            'Separator': [],
            'Label Frame': [],
            'Paned Window': [],
            'Notebook': [],
            'Canvas': [],
            'Treeview': [],
            'Window': []
        }
        for itemID, widget in widgetsList.items():
            propertiesDict = {}
            propertiesDict.update({'name': self.widgetNameDict.get(widget.winfo_id())})
            propertiesDict.update({'x': widget.winfo_x()})
            propertiesDict.update({'y': widget.winfo_y()})
            propertiesDict.update({'cursor': widget.cget('cursor')})
            widgetClass = widget.__class__

            if widgetClass is tk.Button:
                propertiesDict.update({'text': widget.cget('text')})
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'state': widget.cget('state')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Button').append(propertiesDict)
            elif widgetClass is tk.Frame:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Frame').append(propertiesDict)
            elif widgetClass is tk.Label:
                propertiesDict.update({'text': widget.cget('text')})
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Label').append(propertiesDict)
            elif widgetClass is tk.Checkbutton:
                propertiesDict.update({'text': widget.cget('text')})
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Checkbutton').append(propertiesDict)
            elif widgetClass is tk.Radiobutton:
                propertiesDict.update({'text': widget.cget('text')})
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Radiobutton').append(propertiesDict)
            elif widgetClass is tk.Entry:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'background': widget.cget('background')})
                propertiesDict.update({'state': widget.cget('state')})
                dataToSave.get('Entry').append(propertiesDict)
            elif widgetClass is ttk.Combobox:
                propertiesDict.update({'width': widget.cget('width')})
                dataToSave.get('Combobox').append(propertiesDict)
            elif widgetClass is tk.Listbox:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Listbox').append(propertiesDict)
            elif widgetClass is tk.Scrollbar:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'orient': widget.cget('orient')})
                dataToSave.get('Scrollbar').append(propertiesDict)
            elif widgetClass is tk.Text:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Text').append(propertiesDict)
            elif widgetClass is tk.Scale:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'background': widget.cget('background')})
                propertiesDict.update({'length': widget.cget('length')})
                propertiesDict.update({'label': widget.cget('label')})
                propertiesDict.update({'orient': widget.cget('orient')})
                propertiesDict.update({'from': widget.cget('from')})
                propertiesDict.update({'to': widget.cget('to')})
                dataToSave.get('Scale').append(propertiesDict)
            elif widgetClass is tk.Spinbox:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'background': widget.cget('background')})
                propertiesDict.update({'state': widget.cget('state')})
                propertiesDict.update({'to': widget.cget('to')})
                dataToSave.get('Spinbox').append(propertiesDict)
            elif widgetClass is ttk.Progressbar:
                propertiesDict.update({'length': widget.cget('length')})
                propertiesDict.update({'orient': widget.cget('orient')})
                propertiesDict.update({'mode': widget.cget('mode')})
                dataToSave.get('Progressbar').append(propertiesDict)
            elif widgetClass is tk.LabelFrame:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'text': widget.cget('text')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Label Frame').append(propertiesDict)
            elif widgetClass is tk.PanedWindow:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'orient': widget.cget('orient')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Paned Window').append(propertiesDict)
            elif widgetClass is ttk.Notebook:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                dataToSave.get('Notebook').append(propertiesDict)
            elif widgetClass is tk.Canvas:
                propertiesDict.update({'width': widget.cget('width')})
                propertiesDict.update({'height': widget.cget('height')})
                propertiesDict.update({'background': widget.cget('background')})
                dataToSave.get('Canvas').append(propertiesDict)
            elif widgetClass is ttk.Treeview:
                propertiesDict.update({'height': widget.cget('height')})
                dataToSave.get('Treeview').append(propertiesDict)
        propertiesDict = {}
        propertiesDict.update({'width': self.layoutViewFrame.winfo_width()})
        propertiesDict.update({'height': self.layoutViewFrame.winfo_height()})
        dataToSave.get('Window').append(propertiesDict)
        with open(path, 'w') as file:
            print(dataToSave)
            dataJson = json.dumps(dataToSave, indent = 4)
            file.write(dataJson)
        messagebox.showinfo('Saving', message = 'Layout saved successfully')


if __name__ == '__main__':
    app = App()
    app.mainloop()